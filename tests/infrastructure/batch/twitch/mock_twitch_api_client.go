// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/infrastructure/batch/twitch/twitch_api_client.go

// Package mock_twitch is a generated GoMock package.
package mock_twitch

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	twitch "github.com/sokorahen-szk/rust-live/internal/infrastructure/batch/twitch"
	http "github.com/sokorahen-szk/rust-live/pkg/http"
)

// MockTwitchApiClientInterface is a mock of TwitchApiClientInterface interface.
type MockTwitchApiClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTwitchApiClientInterfaceMockRecorder
}

// MockTwitchApiClientInterfaceMockRecorder is the mock recorder for MockTwitchApiClientInterface.
type MockTwitchApiClientInterfaceMockRecorder struct {
	mock *MockTwitchApiClientInterface
}

// NewMockTwitchApiClientInterface creates a new mock instance.
func NewMockTwitchApiClientInterface(ctrl *gomock.Controller) *MockTwitchApiClientInterface {
	mock := &MockTwitchApiClientInterface{ctrl: ctrl}
	mock.recorder = &MockTwitchApiClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwitchApiClientInterface) EXPECT() *MockTwitchApiClientInterfaceMockRecorder {
	return m.recorder
}

// ListBroadcast mocks base method.
func (m *MockTwitchApiClientInterface) ListBroadcast(params []http.RequestParam) (*twitch.ListBroadcastResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBroadcast", params)
	ret0, _ := ret[0].(*twitch.ListBroadcastResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBroadcast indicates an expected call of ListBroadcast.
func (mr *MockTwitchApiClientInterfaceMockRecorder) ListBroadcast(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBroadcast", reflect.TypeOf((*MockTwitchApiClientInterface)(nil).ListBroadcast), params)
}

// ListVideoByUserId mocks base method.
func (m *MockTwitchApiClientInterface) ListVideoByUserId(userId string, params []http.RequestParam) (*twitch.ListVideoByUserIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVideoByUserId", userId, params)
	ret0, _ := ret[0].(*twitch.ListVideoByUserIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVideoByUserId indicates an expected call of ListVideoByUserId.
func (mr *MockTwitchApiClientInterfaceMockRecorder) ListVideoByUserId(userId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVideoByUserId", reflect.TypeOf((*MockTwitchApiClientInterface)(nil).ListVideoByUserId), userId, params)
}
