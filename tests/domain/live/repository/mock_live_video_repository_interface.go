// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/live/repository/live_video_repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/sokorahen-szk/rust-live/internal/domain/live/entity"
	list "github.com/sokorahen-szk/rust-live/internal/usecase/live/list"
)

// MockLiveVideoRepositoryInterface is a mock of LiveVideoRepositoryInterface interface.
type MockLiveVideoRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLiveVideoRepositoryInterfaceMockRecorder
}

// MockLiveVideoRepositoryInterfaceMockRecorder is the mock recorder for MockLiveVideoRepositoryInterface.
type MockLiveVideoRepositoryInterfaceMockRecorder struct {
	mock *MockLiveVideoRepositoryInterface
}

// NewMockLiveVideoRepositoryInterface creates a new mock instance.
func NewMockLiveVideoRepositoryInterface(ctrl *gomock.Controller) *MockLiveVideoRepositoryInterface {
	mock := &MockLiveVideoRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockLiveVideoRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiveVideoRepositoryInterface) EXPECT() *MockLiveVideoRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLiveVideoRepositoryInterface) Create(arg0 context.Context, arg1 []*entity.LiveVideo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLiveVideoRepositoryInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLiveVideoRepositoryInterface)(nil).Create), arg0, arg1)
}

// List mocks base method.
func (m *MockLiveVideoRepositoryInterface) List(arg0 context.Context, arg1 *list.ListLiveVideosInput) ([]*entity.LiveVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*entity.LiveVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLiveVideoRepositoryInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLiveVideoRepositoryInterface)(nil).List), arg0, arg1)
}
